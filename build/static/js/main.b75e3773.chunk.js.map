{"version":3,"sources":["services/phonebook.js","components/Persons.js","components/Filter.js","components/PersonForm.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","service","getAllEntries","axios","get","createEntry","newEntry","post","updateEntry","id","put","deleteEntry","delete","Persons","persons","map","person","name","number","onClick","Filter","handleChange","value","onChange","PersonForm","props","onSubmit","handlePersonAdd","newName","newNumber","type","Notification","notification","className","message","App","useState","setPersons","setNewName","setNewNumber","newFilter","setNewFilter","setNotification","useEffect","contactsService","then","response","data","catch","error","console","log","updatePerson","foundPerson","window","confirm","updatedPerson","filter","setTimeout","handleFieldsChange","target","filteredPersons","length","toLowerCase","includes","event","preventDefault","find","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b75e3773.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = '/api/persons';\n// const baseUrl = 'http://localhost:3001/api/persons';\n\nconst getAllEntries = () => {\n  return axios.get(baseUrl);\n};\n\nconst createEntry = newEntry => {\n  return axios.post(baseUrl, newEntry);\n};\n\nconst updateEntry = (id, newEntry) => {\n  return axios.put(`${baseUrl}/${id}`, newEntry);\n};\n\nconst deleteEntry = (id) => {\n  return axios.delete(`${baseUrl}/${id}`);\n};\n\nconst service = { getAllEntries, createEntry, updateEntry, deleteEntry }\n\nexport default service;\n","import React from 'react';\n\nconst Persons = ({ persons, deleteEntry }) => (\n  <ul>\n    {persons.map(person =>\n      <li key={person.id}>\n        {person.name} {person.number}\n        <button onClick={() => deleteEntry(person.id)}>delete</button>\n      </li>)}\n  </ul>\n);\n\nexport default Persons;\n","import React from 'react';\n\nconst Filter = ({ handleChange, value }) => (\n  <div>\n    filter shown with: <input name=\"filter\" value={value} onChange={handleChange} />\n  </div>\n);\n\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = (props) => (\n  <form onSubmit={props.handlePersonAdd}>\n    <div>\n      name: <input name='name' value={props.newName}\n                   onChange={props.handleChange} />\n    </div>\n    <div>\n      number: <input name='number' value={props.newNumber}\n                     onChange={props.handleChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n);\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Notification = ({ notification }) => {\n  if (notification === null) {\n    return null;\n  }\n\n  return (\n    <div className={notification.type === 'error' ? 'error' : 'success'}>\n      {notification.message}\n    </div>\n  );\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\n\nimport contactsService from './services/phonebook';\nimport Persons from './components/Persons';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [newFilter, setNewFilter] = useState('');\n  const [notification, setNotification] = useState(null);\n\n  useEffect(() => {\n    contactsService.getAllEntries()\n      .then(response => {\n        setPersons(response.data);\n      })\n      .catch(error => {\n        console.log('error: ', error);\n      });\n  }, []);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    const foundPerson = persons.find(person => person.name === newName);\n\n    if (foundPerson) {\n      updatePerson(foundPerson);\n    } else {\n      const person = { name: newName, number: newNumber };\n\n      contactsService.createEntry(person)\n        .then(response => {\n          setPersons(persons.concat(response.data));\n          setNotification({\n              type: 'success',\n              message: `Contact '${response.data.name}' was added successfully`\n            }\n          );\n          setTimeout(() => {\n            setNotification(null);\n          }, 3000);\n          setNewName('');\n          setNewNumber('');\n        })\n        .catch((error) => {\n          setNotification({\n              type: 'error',\n              message: error.response.data.error\n            }\n          );\n          setTimeout(() => {\n            setNotification(null);\n          }, 3000);\n        })\n    }\n  }\n\n  const updatePerson = (foundPerson) => {\n    if (window.confirm(\n      `${newName} is already added to phonebook, replace phone number to new one?`\n    )) {\n      const updatedPerson = { name: foundPerson.name, number: newNumber };\n      contactsService.updateEntry(foundPerson.id, updatedPerson)\n        .then(response => {\n          setPersons(persons.map(person => person.id !== response.data.id\n            ? person\n            : response.data));\n        })\n        .catch(error => {\n          setNotification({\n              type: 'error',\n              message: `Contact '${foundPerson.name}' was already deleted from server`\n            }\n          );\n          setPersons(persons.filter(person => person.id !== foundPerson.id));\n          setTimeout(() => {\n            setNotification(null);\n          }, 3000);\n        });\n    }\n  };\n\n  const deleteEntry = (id) => {\n    if (window.confirm(`Really delete ${persons.find(person => person.id === id).name}?`)) {\n      contactsService.deleteEntry(id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== id));\n        })\n        .catch(error => {\n          console.log('error: ', error);\n        });\n    }\n  };\n\n  const handleFieldsChange = ({ target }) => {\n    const { name, value } = target;\n\n    switch (name) {\n      case 'name':\n        setNewName(value);\n        break;\n      case 'number':\n        setNewNumber(value);\n        break;\n      case 'filter':\n        setNewFilter(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const filteredPersons = newFilter.length === 0\n    ? persons\n    : persons.filter(person => {\n      if (person.name) {\n        return person.name.toLowerCase().includes(newFilter.toLowerCase());\n      }\n      return false;\n    });\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <Filter handleChange={handleFieldsChange} value={newFilter} />\n      <h3>Add a new</h3>\n      <PersonForm handleChange={handleFieldsChange} newName={newName}\n                  newNumber={newNumber} handlePersonAdd={addPerson} />\n      <h2>Numbers</h2>\n      <Persons persons={filteredPersons} deleteEntry={deleteEntry} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}